# JMH version: 1.33
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-LTS
# VM invoker: /home/leferreira/.jdks/corretto-17/bin/java
# VM options: -javaagent:/home/leferreira/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.7172.25/lib/idea_rt.jar=38151:/home/leferreira/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.7172.25/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: br.com.leonardoferreira.poc.Slf4jBenchmark.slf4jAsyncAppender

# Run progress: 0,00% complete, ETA 00:01:15
# Fork: 1 of 1
# Warmup Iteration   1: 1402848,312 ops/s
Iteration   1: 1303773,901 ops/s
Iteration   2: 1445489,326 ops/s
Iteration   3: 1326973,665 ops/s
Iteration   4: 1505811,899 ops/s
Iteration   5: 1436824,483 ops/s


Result "br.com.leonardoferreira.poc.Slf4jBenchmark.slf4jAsyncAppender":
  1403774,655 ±(99.9%) 328675,338 ops/s [Average]
  (min, avg, max) = (1303773,901, 1403774,655, 1505811,899), stdev = 85355,941
  CI (99.9%): [1075099,317, 1732449,992] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-LTS
# VM invoker: /home/leferreira/.jdks/corretto-17/bin/java
# VM options: -javaagent:/home/leferreira/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.7172.25/lib/idea_rt.jar=38151:/home/leferreira/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.7172.25/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: br.com.leonardoferreira.poc.Slf4jBenchmark.slf4jConsoleAppender

# Run progress: 33,33% complete, ETA 00:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 213380,687 ops/s
Iteration   1: 212495,119 ops/s
Iteration   2: 224901,078 ops/s
Iteration   3: 209213,875 ops/s
Iteration   4: 212529,854 ops/s
Iteration   5: 228574,929 ops/s


Result "br.com.leonardoferreira.poc.Slf4jBenchmark.slf4jConsoleAppender":
  217542,971 ±(99.9%) 33115,080 ops/s [Average]
  (min, avg, max) = (209213,875, 217542,971, 228574,929), stdev = 8599,881
  CI (99.9%): [184427,891, 250658,051] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 17, OpenJDK 64-Bit Server VM, 17+35-LTS
# VM invoker: /home/leferreira/.jdks/corretto-17/bin/java
# VM options: -javaagent:/home/leferreira/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.7172.25/lib/idea_rt.jar=38151:/home/leferreira/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/213.7172.25/bin -Dfile.encoding=UTF-8
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 10 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 10 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: br.com.leonardoferreira.poc.Slf4jBenchmark.systemout

# Run progress: 66,67% complete, ETA 00:00:25
# Fork: 1 of 1
# Warmup Iteration   1: 140348,214 ops/s
Iteration   1: 134106,089 ops/s
Iteration   2: 128175,088 ops/s
Iteration   3: 135626,857 ops/s
Iteration   4: 142936,753 ops/s
Iteration   5: 134082,904 ops/s


Result "br.com.leonardoferreira.poc.Slf4jBenchmark.systemout":
  134985,538 ±(99.9%) 20339,596 ops/s [Average]
  (min, avg, max) = (128175,088, 134985,538, 142936,753), stdev = 5282,128
  CI (99.9%): [114645,943, 155325,134] (assumes normal distribution)


# Run complete. Total time: 00:01:17

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score        Error  Units
Slf4jBenchmark.slf4jAsyncAppender    thrpt    5  1403774,655 ± 328675,338  ops/s
Slf4jBenchmark.slf4jConsoleAppender  thrpt    5   217542,971 ±  33115,080  ops/s
Slf4jBenchmark.systemout             thrpt    5   134985,538 ±  20339,596  ops/s
